function [xg,yg,h]=occam_depth_var(f,vname,lev)

% load grid vars:
UVvars = {'U_VELOCITY__MEAN_','V_VELOCITY__MEAN_'};
if ismember(vname,UVvars)
  [xg,yg,hg,mg,m3g] = occam_grid(f,'uv');
else
  [xg,yg,hg,mg,m3g] = occam_grid(f);
end
[n,eta,xi]=size(m3g);

% load var:
if isequal(vname,'dens')
  D=occam_densp(f);
else
  D=use(f,vname);
end

% get z3d:
depth=use(f,'DEPTH')*0.01; N=length(depth);
z3d=repmat(depth,[1 eta xi]);

if 0
  D=flipdim(D,1);
  z3d=flipdim(z3d,1);
  h=get_depth_var(D,z3d,lev);
else % same as:

  d=zeros([N+2,eta xi]);
  d(1,:,:)=inf;
  d(end,:,:)=-inf;
  d(2:end-1,:,:)=D;

  i=d>lev;
  iM = i(2:end,:,:) - i(1:end-1,:,:);
  iM(2:end+1,:,:) = iM;
  iM(1,:,:) = zeros(size(iM(1,:,:)));
  iM = logical(iM);

  i=d < lev;
  im = i(1:end-1,:,:) - i(2:end,:,:);
  im(end+1,:,:) = zeros(size(iM(1,:,:)));
  im = logical(im);

  vUp   = reshape(d(iM), eta, xi);
  vDown = reshape(d(im), eta, xi);
  coefUp   = (vUp-lev)./(vUp-vDown);
  coefDown = (lev-vDown)./(vUp-vDown);

  Z=z3d;
  Z(2:end+1,:,:) = z3d;
  Z(1,:,:)       = repmat(nan,eta,xi);
  Z(end+1,:,:)   = repmat(nan,eta,xi);

  ZUp   = reshape(Z(iM),eta,xi);
  ZDown = reshape(Z(im),eta,xi);
  h = coefUp.*ZDown + coefDown.*ZUp;
end
